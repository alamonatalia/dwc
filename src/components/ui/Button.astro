---
interface ButtonProps {
    id?: string | undefined;              
    type?: 'solid' | 'ghost' | 'soft' | 'transparent' | 'inverted'; 
    className?: string;        
    disabled?: boolean;        
    href?: string;             
}

const {
    id,
    type = 'solid',
    className = '',
    disabled = false,
    href,
}: ButtonProps = Astro.props;

const commonClasses = 'inline-flex items-center justify-center border-2 border-solid border-transparent text-sm font-medium px-5 py-3 transition-all duration-200 active:scale-90 ';

const buttonClasses = `${commonClasses} 
    ${type === 'solid'
    ? 'bg-[var(--brand-gray-900)] text-[var(--brand-gray-50)] hover:bg-[var(--brand-gray-700)] active:bg-[var(--brand-gray-950)]'
    : type === 'ghost'
    ? 'border-[var(--brand-gray-900)] text-[var(--brand-gray-900)] hover:bg-[var(--brand-gray-100)] active:bg-[var(--brand-gray-200)]'
    : type === 'soft'
    ? 'bg-[var(--brand-gray-50)] hover:bg-[var(--brand-gray-100)] active:bg-[var(--brand-gray-200)]'
    : type === 'transparent'
    ? 'hover:bg-[var(--brand-gray-100)] active:bg-[var(--brand-gray-200)]'
    : type === 'inverted'
    ? 'bg-[var(--brand-gray-50)] hover:bg-[var(--brand-gray-100)] active:bg-white'
    : 'bg-transparent text-blue-500'
} ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'} ${className}`
---

<!-- Condicionalmente renderiza un <button> o un <a> -->
{href ? (
    <a
        id={id}
        href={href}
        class={buttonClasses}
        aria-disabled={disabled}  
    >
        <slot/>
    </a>
) : (
    <button
        id={id}
        type="button"
        class={buttonClasses}
        disabled={disabled}
    >
        <slot/>
    </button>
)}